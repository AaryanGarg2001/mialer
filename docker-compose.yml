version: '3.8'

services:
  # Application service (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: email-summarizer-app-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/email_summarizer_prod
    env_file:
      - .env.production
    volumes:
      - app-logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - email-summarizer-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health/live', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB service (Production)
  mongodb:
    image: mongo:7.0
    container_name: email-summarizer-mongodb-prod
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=email_summarizer_prod
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./scripts/mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./config/mongod.conf:/etc/mongod.conf:ro
    command: ["mongod", "--config", "/etc/mongod.conf"]
    networks:
      - email-summarizer-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # # Redis service (Production)
  # redis:
  #   image: redis:7.2-alpine
  #   container_name: email-summarizer-redis-prod
  #   volumes:
  #     - redis-data:/data
  #     - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
  #   command: redis-server /usr/local/etc/redis/redis.conf
  #   networks:
  #     - email-summarizer-network
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 256M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 128M
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 60s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  # # Nginx reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: email-summarizer-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./config/ssl:/etc/ssl/certs:ro
  #     - nginx-logs:/var/log/nginx
  #   depends_on:
  #     - app
  #   networks:
  #     - email-summarizer-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  # nginx-logs:
  #   driver: local

networks:
  email-summarizer-network:
    driver: bridge
    name: email-summarizer-network-prod